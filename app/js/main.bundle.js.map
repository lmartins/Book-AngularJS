{"version":3,"sources":["webpack:///./src/js/app.js","webpack:///./bower_components/angular-cookies/angular-cookies.js","webpack:///./src/js/config.js","webpack:///./src/js/cart/services/items.js"],"names":[],"mappings":";;;;;;;;AAAA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,sBAAqB,yBAAyB;AAC9C;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA,uBAAsB;;AAEtB;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,EAAC;;;;;;;ACrGD;AACA;AACA;AACA;AACA;AACA,wCAAuC;;AAEvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ,oCAAoC;AAC5C,KAAI,4CAA4C;AAChD;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;AACA,uBAAsB;AACtB,2BAA0B;AAC1B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,oDAAmD;AACnD;AACA;AACA;AACA;AACA;AACA,QAAO;;AAEP;;AAEA;AACA;AACA;AACA;;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,gBAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,4BAA4B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAQ;AACR;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,sBAAqB,OAAO;AAC5B;AACA;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA,UAAS;;AAET;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAmB,OAAO;AAC1B;AACA;AACA;AACA;AACA;;AAEA,MAAK;;;AAGL,EAAC;;;;;;;AC7MD;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA4B,gBAAgB;AAC5C;AACA,EAAC;;;;;;;AC9CD;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,QAAO,+CAA+C;AACtD,QAAO,gDAAgD;AACvD,QAAO;AACP;AACA;AACA;AACA,EAAC","sourcesContent":["'use strict';\n\n// var angular = require('angular');\nrequire('angular-cookies');\n\nvar myApp = angular.module('myApp', ['ngSanitize', 'ngResource', 'ngCookies', 'ngRoute']);\n\n// CONTROLLERS ----------------------------------------------------------------\nrequire('./config');\n\n// CART -----------------------------------------------------------------\nrequire('./cart/services/items.js');\n\n// HELLO WORD -----------------------------------------------------------------\n// require('./HelloWorld/controllers/helloWorldCtrl.js');\n\n\n// DIRECTIVES -----------------------------------------------------------------\n// require('./controllers/SampleDirectiveController');\n\n\n// FILTERS --------------------------------------------------------------------\n// require('./filters');\n\n\n// SERVICES -------------------------------------------------------------------\n// require('./services/calendarHelper');\n\n\n// CONTROLLERS À LÁ CARTE\n// Quick code snippets to be removed or placed in proper places\n\n\nmyApp.controller('MainCtrl',\n  function ($scope, $location, Data) {\n    $scope.data = Data;\n  }\n);\n\n\nmyApp.controller('CartController',\n  function ($scope, $location, Items) {\n\n    $scope.bill = {};\n    $scope.items = Items.query();\n\n    $scope.remove = function (index) {\n      $scope.items.splice(index, 1);\n    };\n\n    var calculateTotals = function () {\n      var total = 0;\n      for (var i = 0; i < $scope.items.length; i++) {\n        total = total + $scope.items[i].price * $scope.items[i].quantity;\n      }\n      $scope.bill.total = total;\n      $scope.bill.discount = total > 200 ? 10 : 0;\n      $scope.bill.subtotal = total - $scope.bill.discount;\n    }\n\n    $scope.$watch('items', calculateTotals, true);\n\n  }\n);\n\nmyApp.controller('StartUpController',\n  function ($scope) {\n    $scope.funding = {startingEstimate: 0};\n\n    var computeNeeded = function () {\n      $scope.funding.needed = $scope.funding.startingEstimate * 10;\n    };\n\n    $scope.$watch('funding.startingEstimate', computeNeeded);\n\n    $scope.requestFunding = function () {\n      console.log('Sorry, please get more clients first.');\n    }\n\n    $scope.reset = function () {\n      $scope.funding.startingEstimate = 0;\n    }\n\n  }\n);\n\n\nmyApp.controller('MenuCtrl', function ($scope) {\n  $scope.isDisabled = false;\n  $scope.menuState = {\n    show: false\n  };\n\n  $scope.toggleMenu = function () {\n    $scope.menuState.show = !$scope.menuState.show;\n  };\n  $scope.stun = function () {\n    // do something\n    $scope.isDisabled = true;\n  };\n\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/app.js\n ** module id = 0\n ** module chunks = 0\n **/","/**\n * @license AngularJS v1.2.22\n * (c) 2010-2014 Google, Inc. http://angularjs.org\n * License: MIT\n */\n(function(window, angular, undefined) {'use strict';\n\n/**\n * @ngdoc module\n * @name ngCookies\n * @description\n *\n * # ngCookies\n *\n * The `ngCookies` module provides a convenient wrapper for reading and writing browser cookies.\n *\n *\n * <div doc-module-components=\"ngCookies\"></div>\n *\n * See {@link ngCookies.$cookies `$cookies`} and\n * {@link ngCookies.$cookieStore `$cookieStore`} for usage.\n */\n\n\nangular.module('ngCookies', ['ng']).\n  /**\n   * @ngdoc service\n   * @name $cookies\n   *\n   * @description\n   * Provides read/write access to browser's cookies.\n   *\n   * Only a simple Object is exposed and by adding or removing properties to/from this object, new\n   * cookies are created/deleted at the end of current $eval.\n   * The object's properties can only be strings.\n   *\n   * Requires the {@link ngCookies `ngCookies`} module to be installed.\n   *\n   * @example\n   *\n   * ```js\n   * angular.module('cookiesExample', ['ngCookies'])\n   *   .controller('ExampleController', ['$cookies', function($cookies) {\n   *     // Retrieving a cookie\n   *     var favoriteCookie = $cookies.myFavorite;\n   *     // Setting a cookie\n   *     $cookies.myFavorite = 'oatmeal';\n   *   }]);\n   * ```\n   */\n   factory('$cookies', ['$rootScope', '$browser', function ($rootScope, $browser) {\n      var cookies = {},\n          lastCookies = {},\n          lastBrowserCookies,\n          runEval = false,\n          copy = angular.copy,\n          isUndefined = angular.isUndefined;\n\n      //creates a poller fn that copies all cookies from the $browser to service & inits the service\n      $browser.addPollFn(function() {\n        var currentCookies = $browser.cookies();\n        if (lastBrowserCookies != currentCookies) { //relies on browser.cookies() impl\n          lastBrowserCookies = currentCookies;\n          copy(currentCookies, lastCookies);\n          copy(currentCookies, cookies);\n          if (runEval) $rootScope.$apply();\n        }\n      })();\n\n      runEval = true;\n\n      //at the end of each eval, push cookies\n      //TODO: this should happen before the \"delayed\" watches fire, because if some cookies are not\n      //      strings or browser refuses to store some cookies, we update the model in the push fn.\n      $rootScope.$watch(push);\n\n      return cookies;\n\n\n      /**\n       * Pushes all the cookies from the service to the browser and verifies if all cookies were\n       * stored.\n       */\n      function push() {\n        var name,\n            value,\n            browserCookies,\n            updated;\n\n        //delete any cookies deleted in $cookies\n        for (name in lastCookies) {\n          if (isUndefined(cookies[name])) {\n            $browser.cookies(name, undefined);\n          }\n        }\n\n        //update all cookies updated in $cookies\n        for(name in cookies) {\n          value = cookies[name];\n          if (!angular.isString(value)) {\n            value = '' + value;\n            cookies[name] = value;\n          }\n          if (value !== lastCookies[name]) {\n            $browser.cookies(name, value);\n            updated = true;\n          }\n        }\n\n        //verify what was actually stored\n        if (updated){\n          updated = false;\n          browserCookies = $browser.cookies();\n\n          for (name in cookies) {\n            if (cookies[name] !== browserCookies[name]) {\n              //delete or reset all cookies that the browser dropped from $cookies\n              if (isUndefined(browserCookies[name])) {\n                delete cookies[name];\n              } else {\n                cookies[name] = browserCookies[name];\n              }\n              updated = true;\n            }\n          }\n        }\n      }\n    }]).\n\n\n  /**\n   * @ngdoc service\n   * @name $cookieStore\n   * @requires $cookies\n   *\n   * @description\n   * Provides a key-value (string-object) storage, that is backed by session cookies.\n   * Objects put or retrieved from this storage are automatically serialized or\n   * deserialized by angular's toJson/fromJson.\n   *\n   * Requires the {@link ngCookies `ngCookies`} module to be installed.\n   *\n   * @example\n   *\n   * ```js\n   * angular.module('cookieStoreExample', ['ngCookies'])\n   *   .controller('ExampleController', ['$cookieStore', function($cookieStore) {\n   *     // Put cookie\n   *     $cookieStore.put('myFavorite','oatmeal');\n   *     // Get cookie\n   *     var favoriteCookie = $cookieStore.get('myFavorite');\n   *     // Removing a cookie\n   *     $cookieStore.remove('myFavorite');\n   *   }]);\n   * ```\n   */\n   factory('$cookieStore', ['$cookies', function($cookies) {\n\n      return {\n        /**\n         * @ngdoc method\n         * @name $cookieStore#get\n         *\n         * @description\n         * Returns the value of given cookie key\n         *\n         * @param {string} key Id to use for lookup.\n         * @returns {Object} Deserialized cookie value.\n         */\n        get: function(key) {\n          var value = $cookies[key];\n          return value ? angular.fromJson(value) : value;\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookieStore#put\n         *\n         * @description\n         * Sets a value for given cookie key\n         *\n         * @param {string} key Id for the `value`.\n         * @param {Object} value Value to be stored.\n         */\n        put: function(key, value) {\n          $cookies[key] = angular.toJson(value);\n        },\n\n        /**\n         * @ngdoc method\n         * @name $cookieStore#remove\n         *\n         * @description\n         * Remove given cookie\n         *\n         * @param {string} key Id of the key-value pair to delete.\n         */\n        remove: function(key) {\n          delete $cookies[key];\n        }\n      };\n\n    }]);\n\n\n})(window, window.angular);\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./bower_components/angular-cookies/angular-cookies.js\n ** module id = 1\n ** module chunks = 0\n **/","'use strict';\n\nvar myApp = angular.module('myApp');\n\nmyApp.config(function ($routeProvider) {\n  $routeProvider.when('/about',\n    {\n      template: 'Hello World'\n    }\n  );\n  $routeProvider.when('/newEvent',\n    {\n      templateUrl: '/templates/NewEvent.html',\n      controller: 'EditEventController'\n    }\n  );\n  $routeProvider.when('/events',\n    {\n      templateUrl: 'templates/EventList.html',\n      controller: 'EventListController',\n      resolve: {\n        events: function ($route, eventData) {\n          return eventData.getAllEvents().$promise;\n        }\n      }\n    }\n  );\n  $routeProvider.when('/editProfile',\n    {\n      templateUrl: 'templates/EditProfile.html',\n      controller: 'EditProfileController'\n    }\n  );\n  $routeProvider.when('/event/:eventId',\n    {\n      templateUrl: '/templates/EventDetails.html',\n      controller: 'EventController',\n      resolve: {\n        event: function ($route, eventData) {\n          return eventData.getEvent($route.current.pathParams.eventId).$promise;\n        }\n      }\n    }\n  );\n  $routeProvider.otherwise({redirectTo: '/'});\n  // $locationProvider.html5Mode(true);\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/config.js\n ** module id = 2\n ** module chunks = 0\n **/","'use strict';\n\nvar myApp = angular.module('myApp');\nmyApp.factory('Items', function () {\n  var items = {};\n  items.query = function () {\n    // in real apps we'de pull this data from the server\n    return [\n      {title: 'Paint pots', quantity: 8, price: 3.95 },\n      {title: 'Plka dots', quantity: 17, price: 12.95 },\n      {title: 'Pebbles', quantity: 5, price: 6.95 }\n    ]\n  }\n  return items;\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/js/cart/services/items.js\n ** module id = 3\n ** module chunks = 0\n **/"],"sourceRoot":"","file":"main.bundle.js"}